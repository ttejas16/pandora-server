generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    String       @id @default(uuid()) @db.Uuid
  email     String       @unique
  username  String       @unique
  password  String
  createdAt DateTime     @default(now()) @db.Timestamp(6)
  topics    UserTopics[]
  Test      Test[]

  createdTopics Topic[]       @relation("TopicOwner")
  Submissions   Submissions[]
}

model Topic {
  topicId       String       @id @default(uuid()) @db.Uuid
  ownerId       String       @db.Uuid
  owner         User         @relation("TopicOwner", fields: [ownerId], references: [userId], onDelete: Cascade, map: "userId")
  topicName     String
  topicSubtitle String
  isPublic      Boolean
  topicCode     String
  thumbnailUrl  String
  createdAt     DateTime     @default(now()) @db.Timestamp(6)
  users         UserTopics[]
  Test          Test[]
}

model UserTopics {
  topic    Topic     @relation(fields: [topicId], references: [topicId], onDelete: Cascade, map: "topicId")
  topicId  String    @db.Uuid
  user     User      @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "userId")
  userId   String    @db.Uuid
  joinedAt DateTime? @db.Timestamp(6)

  @@id([userId, topicId])
}

model Test {
  testId      String      @id @default(uuid()) @db.Uuid
  topicId     String      @db.Uuid
  topic       Topic       @relation(fields: [topicId], references: [topicId], onDelete: Cascade, map: "topicId")
  userId      String      @db.Uuid
  user        User        @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "userId")
  title       String
  description String
  startTime   DateTime?   @db.Timestamp(6)
  endTime     DateTime?   @db.Timestamp(6)
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  questions   Questions[]

  Submissions Submissions[]
}

model Questions {
  questionId String   @id @default(uuid()) @db.Uuid
  testId     String   @db.Uuid
  test       Test     @relation(fields: [testId], references: [testId], onDelete: Cascade, map: "testId")
  question   String
  options    Json     @db.Json
  answer     String
  createdAt  DateTime @default(now()) @db.Timestamp(6)
}

model Submissions {
  attemptId   String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  testId      String   @db.Uuid
  questionId  String   @db.Uuid
  startedAt   DateTime? @db.Timestamp(6)
  completedAt DateTime @default(now()) @db.Timestamp(6)
  userAnswer  String
  Test        Test     @relation(fields: [testId], references: [testId], onDelete: Cascade, map: "testId")
  User        User     @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "userId")
}
